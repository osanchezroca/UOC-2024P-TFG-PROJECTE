generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model report {
  id                String              @id(map: "report_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  client_id         String?             @db.Uuid
  site_event_id     String?             @db.Uuid
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @db.Timestamp(6)
  archived_at       DateTime?           @db.Timestamp(6)
  status_id         String?             @db.Uuid
  site_tenant_id    String              @db.Uuid
  latitude          Float
  longitude         Float
  report_status     report_status?      @relation(fields: [status_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "report_report_status_id_fk")
  site_events       site_event?         @relation(fields: [site_event_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "report_site_events_id_fk")
  site_tenant       site_tenant         @relation(fields: [site_tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "report_site_tenant_id_fk")
  report_attachment report_attachment[]
  report_log        report_log[]
}

model report_attachment {
  id         String    @id(map: "report_attachment_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  route      String    @unique(map: "report_attachment_pk_2") @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamp(6)
  report_id  String?   @db.Uuid
  report     report?   @relation(fields: [report_id], references: [id], onDelete: Restrict, map: "report_attachment_report_id_fk")
}

model report_status {
  id     String   @id(map: "report_status_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name   String   @db.VarChar
  color  String?  @db.VarChar
  code   String   @unique(map: "report_status_pk_2") @db.VarChar
  report report[]
}

model site_tenant {
  id                String       @id(map: "site_tenant_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String       @db.VarChar
  initial_latitude  Float?
  initial_longitude Float?
  initial_zoom      Float?
  hour_opening      DateTime?    @db.Time(6)
  hour_closing      DateTime?    @db.Time(6)
  created_at        DateTime     @default(now()) @db.Timestamp(6)
  disabled_at       DateTime?    @db.Timestamp(6)
  code              String       @unique(map: "site_tenant_pk_2") @db.VarChar
  admin_key         String?      @db.VarChar
  client            client[]
  report            report[]
  site_event        site_event[]
}

model client {
  id             String      @id(map: "clients_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  external_id    String      @db.VarChar
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  site_tenant_id String      @db.Uuid
  last_access    DateTime    @default(now()) @db.Timestamp(6)
  site_tenant    site_tenant @relation(fields: [site_tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "report_site_tenant_id_fk")

  @@unique([external_id, site_tenant_id], map: "client_pk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model site_event {
  id             String      @id(map: "site_event_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String      @unique(map: "site_event_pk_2") @db.VarChar
  icon           String      @db.VarChar
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  site_tenant_id String      @db.Uuid
  deleted_at     DateTime?   @db.Timestamp(6)
  report         report[]
  site_tenant    site_tenant @relation(fields: [site_tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "report_site_tenant_id_fk")
}

model report_log {
  id         String   @id(map: "report_log_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  report_id  String   @db.Uuid
  message    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  report     report   @relation(fields: [report_id], references: [id], onDelete: Cascade, map: "report_log_report_id_fk")
}
